

from DeepJetCore.TrainData import TrainData, fileTimeOut
import numpy as np

class TrainData_example(TrainData):
    def __init__(self):
        TrainData.__init__(self)
        # no class member is mandatory
        self.description = "This is a TrainData example file. Having a description string is not a bad idea (but not mandatory), e.g. for describing the array structure."
        #define any other (configuration) members that seem useful
        self.someusefulemember = "something you might need later"

        
    #def createWeighterObjects(self, allsourcefiles):
        # 
        # This function can be used to derive weights (or whatever quantity)
        # based on the entire data sample. It should return a dictionary that will then
        # be passed to either of the following functions. The weighter objects
        # should be pickleable.
        # In its default implementation, the dict is empty
        # return {}
    
    
    def convertFromSourceFile(self, filename, weighterobjects, istraining):
        # This is the only really mandatory function (unless writeFromSourceFile is defined).
        # It defines the conversion rule from an input source file to the lists of training 
        # arrays self.x, self.y, self.w
        #  self.x is a list of input feature arrays
        #  self.y is a list of truth arrays
        #  self.w is optional and can contain a weight array 
        #         (needs to have same number of entries as truth array)
        #         If no weights are needed, this can be left completely empty
        #
        # The conversion should convert finally to numpy arrays. In the future, 
        # also tensorflow tensors will be supported.
        #
        # In this example, differnt ways of reading files are deliberatly mixed
        # 
        
        
        print('reading '+filename)
        
        import ROOT
        fileTimeOut(filename,120) #give eos a minute to recover
        rfile = ROOT.TFile(filename)
        tree = rfile.Get("tree")
        nsamples = tree.GetEntries()
        
        # user code, example works with the example 2D images in root format generated by make_example_data
        from DeepJetCore.preprocessing import read2DArray

        feature_array = read2DArray(filename,"tree","image2d",nsamples,32,32)
        
        print('feature_array',feature_array.shape)
        

        import uproot

        urfile = uproot.open(filename)["tree"]
        truth = np.concatenate([np.expand_dims(urfile.array("isA"), axis=1) , 
                                np.expand_dims(urfile.array("isB"), axis=1), 
                                np.expand_dims(urfile.array("isC"), axis=1)],axis=1)
        
        truth = truth.astype(dtype='float32', order='C') #important, float32 and C-type!
        
        self.nsamples=len(feature_array)
        
        #returns a list of feature arrays, a list of truth arrays and a list of weight arrays
        return [feature_array], [truth], []
    
    ## defines how to write out the prediction
    def writeOutPrediction(self, predicted, features, truth, weights, outfilename, inputfile):
        # predicted will be a list
        
        from root_numpy import array2root
        out = np.core.records.fromarrays(predicted[0].transpose(), 
                                             names='prob_isA, prob_isB, prob_isC')
        
        array2root(out, outfilename, 'tree')
        
